/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/hex-to-css-filter/dist/umd/hex-to-css-filter.js":
/*!**********************************************************************!*\
  !*** ./node_modules/hex-to-css-filter/dist/umd/hex-to-css-filter.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("(function (global, factory) {\n     true ? factory(exports) :\n    0;\n})(this, (function (exports) { 'use strict';\n\n    /******************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n        var e = new Error(message);\r\n        return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n    };\n\n    var Color = /** @class */ (function () {\n        function Color(r, g, b) {\n            this.r = 0;\n            this.g = 0;\n            this.b = 0;\n            this.set(r, g, b);\n        }\n        Color.prototype.set = function (r, g, b) {\n            this.r = this.clamp(r);\n            this.g = this.clamp(g);\n            this.b = this.clamp(b);\n        };\n        /**\n         * Applying cals to get CSS filter for hue-rotate\n         *\n         * @param {number} [angle=0]\n         * @memberof Color\n         */\n        Color.prototype.hueRotate = function (angle) {\n            if (angle === void 0) { angle = 0; }\n            angle = (angle / 180) * Math.PI;\n            var sin = Math.sin(angle);\n            var cos = Math.cos(angle);\n            this.multiply([\n                0.213 + cos * 0.787 - sin * 0.213,\n                0.715 - cos * 0.715 - sin * 0.715,\n                0.072 - cos * 0.072 + sin * 0.928,\n                0.213 - cos * 0.213 + sin * 0.143,\n                0.715 + cos * 0.285 + sin * 0.14,\n                0.072 - cos * 0.072 - sin * 0.283,\n                0.213 - cos * 0.213 - sin * 0.787,\n                0.715 - cos * 0.715 + sin * 0.715,\n                0.072 + cos * 0.928 + sin * 0.072,\n            ]);\n        };\n        /**\n         * Applying cals to get CSS filter for grayscale\n         *\n         * @param {number} [value=1]\n         * @memberof Color\n         */\n        Color.prototype.grayscale = function (value) {\n            if (value === void 0) { value = 1; }\n            this.multiply([\n                0.2126 + 0.7874 * (1 - value),\n                0.7152 - 0.7152 * (1 - value),\n                0.0722 - 0.0722 * (1 - value),\n                0.2126 - 0.2126 * (1 - value),\n                0.7152 + 0.2848 * (1 - value),\n                0.0722 - 0.0722 * (1 - value),\n                0.2126 - 0.2126 * (1 - value),\n                0.7152 - 0.7152 * (1 - value),\n                0.0722 + 0.9278 * (1 - value),\n            ]);\n        };\n        /**\n         * Applying cals to get CSS filter for sepia\n         *\n         * @param {number} [value=1]\n         * @memberof Color\n         */\n        Color.prototype.sepia = function (value) {\n            if (value === void 0) { value = 1; }\n            this.multiply([\n                0.393 + 0.607 * (1 - value),\n                0.769 - 0.769 * (1 - value),\n                0.189 - 0.189 * (1 - value),\n                0.349 - 0.349 * (1 - value),\n                0.686 + 0.314 * (1 - value),\n                0.168 - 0.168 * (1 - value),\n                0.272 - 0.272 * (1 - value),\n                0.534 - 0.534 * (1 - value),\n                0.131 + 0.869 * (1 - value),\n            ]);\n        };\n        /**\n         * Applying cals to get CSS filter for saturate\n         *\n         * @param {number} [value=1]\n         * @memberof Color\n         */\n        Color.prototype.saturate = function (value) {\n            if (value === void 0) { value = 1; }\n            this.multiply([\n                0.213 + 0.787 * value,\n                0.715 - 0.715 * value,\n                0.072 - 0.072 * value,\n                0.213 - 0.213 * value,\n                0.715 + 0.285 * value,\n                0.072 - 0.072 * value,\n                0.213 - 0.213 * value,\n                0.715 - 0.715 * value,\n                0.072 + 0.928 * value,\n            ]);\n        };\n        Color.prototype.multiply = function (matrix) {\n            // These values are needed. It's correct because the returned values will change\n            var newR = this.clamp(this.r * matrix[0] + this.g * matrix[1] + this.b * matrix[2]);\n            var newG = this.clamp(this.r * matrix[3] + this.g * matrix[4] + this.b * matrix[5]);\n            var newB = this.clamp(this.r * matrix[6] + this.g * matrix[7] + this.b * matrix[8]);\n            this.r = newR;\n            this.g = newG;\n            this.b = newB;\n        };\n        /**\n         * Applying cals to get CSS filter for brightness\n         *\n         * @param {number} [value=1]\n         * @memberof Color\n         */\n        Color.prototype.brightness = function (value) {\n            if (value === void 0) { value = 1; }\n            this.linear(value);\n        };\n        /**\n         * Applying cals to get CSS filter for contrast\n         *\n         * @param {number} [value=1]\n         * @memberof Color\n         */\n        Color.prototype.contrast = function (value) {\n            if (value === void 0) { value = 1; }\n            this.linear(value, -(0.5 * value) + 0.5);\n        };\n        Color.prototype.linear = function (slope, intercept) {\n            if (slope === void 0) { slope = 1; }\n            if (intercept === void 0) { intercept = 0; }\n            this.r = this.clamp(this.r * slope + intercept * 255);\n            this.g = this.clamp(this.g * slope + intercept * 255);\n            this.b = this.clamp(this.b * slope + intercept * 255);\n        };\n        /**\n         * Applying cals to get CSS filter for invert\n         *\n         * @param {number} [value=1]\n         * @memberof Color\n         */\n        Color.prototype.invert = function (value) {\n            if (value === void 0) { value = 1; }\n            this.r = this.clamp((value + (this.r / 255) * (1 - 2 * value)) * 255);\n            this.g = this.clamp((value + (this.g / 255) * (1 - 2 * value)) * 255);\n            this.b = this.clamp((value + (this.b / 255) * (1 - 2 * value)) * 255);\n        };\n        /**\n         * transform RGB into HSL values\n         *\n         * @returns {HSLData}\n         * @memberof Color\n         */\n        Color.prototype.hsl = function () {\n            var red = this.r / 255;\n            var green = this.g / 255;\n            var blue = this.b / 255;\n            // find greatest and smallest channel values\n            var max = Math.max(red, green, blue);\n            var min = Math.min(red, green, blue);\n            var hue = 0;\n            var saturation = 0;\n            var lightness = (max + min) / 2;\n            // If min and max have the same values, it means\n            // the given color is achromatic\n            if (max === min) {\n                return {\n                    h: 0,\n                    s: 0,\n                    l: lightness * 100,\n                };\n            }\n            // Adding delta value of greatest and smallest channel values\n            var delta = max - min;\n            saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n            if (max === red) {\n                hue = (green - blue) / delta + (green < blue ? 6 : 0);\n            }\n            else if (max === green) {\n                hue = (blue - red) / delta + 2;\n            }\n            else if (max === blue) {\n                hue = (red - green) / delta + 4;\n            }\n            hue /= 6;\n            return {\n                h: hue * 100,\n                s: saturation * 100,\n                l: lightness * 100,\n            };\n        };\n        /**\n         * Normalize the value to follow the min and max for RGB colors\n         * min: 0\n         * max: 255\n         *\n         * @private\n         * @param {number} value\n         * @returns {number}\n         * @memberof Color\n         */\n        Color.prototype.clamp = function (value) {\n            // Minimum RGB Value = 0;\n            // Maximum RGB Value = 255;\n            return Math.min(Math.max(value, 0), 255);\n        };\n        return Color;\n    }());\n\n    var Solver = /** @class */ (function () {\n        function Solver(target, options) {\n            this.target = target;\n            this.targetHSL = target.hsl();\n            this.options = Object.assign({}, \n            // Adding default values for options\n            {\n                acceptanceLossPercentage: 5,\n                maxChecks: 15,\n            }, options);\n            // All the calcs done by the library to generate\n            // a CSS Filter are based on the color `#000`\n            // in this case, `rgb(0, 0, 0)`\n            // Please make sure the background of the element\n            // is `#000` for better performance\n            // and color similarity.\n            this.reusedColor = new Color(0, 0, 0);\n        }\n        /**\n         * Returns the solved values for the\n         *\n         * @returns {(SPSAPayload & { filter: string; })}\n         * @memberof Solver\n         */\n        Solver.prototype.solve = function () {\n            var result = this.solveNarrow(this.solveWide());\n            return {\n                values: result.values,\n                called: result.called,\n                loss: result.loss,\n                filter: this.css(result.values),\n            };\n        };\n        /**\n         * Solve wide values based on the wide values for RGB and HSL values\n         *\n         * @private\n         * @returns {SPSAPayload}\n         * @memberof Solver\n         */\n        Solver.prototype.solveWide = function () {\n            var A = 5;\n            var c = 15;\n            // Wide values for RGB and HSL values\n            // the values in the order: [`r`, `g`, `b`, `h`, `s`, `l`]\n            var a = [60, 180, 18000, 600, 1.2, 1.2];\n            var best = { loss: Infinity };\n            var counter = 0;\n            while (best.loss > this.options.acceptanceLossPercentage) {\n                var initialFilterValues = [50, 20, 3750, 50, 100, 100];\n                var result = this.spsa({\n                    A: A,\n                    a: a,\n                    c: c,\n                    values: initialFilterValues,\n                    // for wide values we should use the double of tries in\n                    // comparison of `solveNarrow()` method\n                    maxTriesInLoop: 1000,\n                });\n                if (result.loss < best.loss) {\n                    best = result;\n                }\n                counter += 1;\n                if (counter >= this.options.maxChecks) {\n                    break;\n                }\n            }\n            return Object.assign({}, best, { called: counter });\n        };\n        /**\n         * Solve narrow values based on the wide values for the filter\n         *\n         * @private\n         * @param {SPSAPayload} wide\n         * @returns {SPSAPayload}\n         * @memberof Solver\n         */\n        Solver.prototype.solveNarrow = function (wide) {\n            var A = wide.loss;\n            var c = 2;\n            var A1 = A + 1;\n            // Narrow values for RGB and HSL values\n            // the values in the order: [`r`, `g`, `b`, `h`, `s`, `l`]\n            var a = [0.25 * A1, 0.25 * A1, A1, 0.25 * A1, 0.2 * A1, 0.2 * A1];\n            return this.spsa({\n                A: A,\n                a: a,\n                c: c,\n                values: wide.values,\n                maxTriesInLoop: 500,\n                called: wide.called,\n            });\n        };\n        /**\n         * Returns final value based on the current filter order\n         * to get the order, please check the returned value\n         * in `css()` method\n         *\n         * @private\n         * @param {number} value\n         * @param {number} idx\n         * @returns {number}\n         * @memberof Solver\n         */\n        Solver.prototype.fixValueByFilterIDX = function (value, idx) {\n            var max = 100;\n            // Fixing max, minimum and value by filter\n            if (idx === 2 /* saturate */) {\n                max = 7500;\n            }\n            else if (idx === 4 /* brightness */ || idx === 5 /* contrast */) {\n                max = 200;\n            }\n            if (idx === 3 /* hue-rotate */) {\n                if (value > max) {\n                    value %= max;\n                }\n                else if (value < 0) {\n                    value = max + (value % max);\n                }\n            }\n            // Checking if value is below the minimum or above\n            // the maximum allowed by filter\n            else if (value < 0) {\n                value = 0;\n            }\n            else if (value > max) {\n                value = max;\n            }\n            return value;\n        };\n        Solver.prototype.spsa = function (_a) {\n            var A = _a.A, a = _a.a, c = _a.c, values = _a.values, _b = _a.maxTriesInLoop, maxTriesInLoop = _b === void 0 ? 500 : _b, _c = _a.called, called = _c === void 0 ? 0 : _c;\n            var alpha = 1;\n            var gamma = 0.16666666666666666;\n            var best = null;\n            var bestLoss = Infinity;\n            var deltas = new Array(6);\n            var highArgs = new Array(6);\n            var lowArgs = new Array(6);\n            // Size of all CSS filters to be applied to get the correct color\n            var filtersToBeAppliedSize = 6;\n            for (var key = 0; key < maxTriesInLoop; key++) {\n                var ck = c / Math.pow(key + 1, gamma);\n                for (var i = 0; i < filtersToBeAppliedSize; i++) {\n                    deltas[i] = Math.random() > 0.5 ? 1 : -1;\n                    highArgs[i] = values[i] + ck * deltas[i];\n                    lowArgs[i] = values[i] - ck * deltas[i];\n                }\n                var lossDiff = this.loss(highArgs) - this.loss(lowArgs);\n                for (var i = 0; i < filtersToBeAppliedSize; i++) {\n                    var g = (lossDiff / (2 * ck)) * deltas[i];\n                    var ak = a[i] / Math.pow(A + key + 1, alpha);\n                    values[i] = this.fixValueByFilterIDX(values[i] - ak * g, i);\n                }\n                var loss = this.loss(values);\n                if (loss < bestLoss) {\n                    best = values.slice(0);\n                    bestLoss = loss;\n                }\n            }\n            return { values: best, loss: bestLoss, called: called };\n        };\n        /**\n         * Checks how much is the loss for the filter in RGB and HSL colors\n         *\n         * @private\n         * @param {SPSAPayload['values']} filters\n         * @returns {number}\n         * @memberof Solver\n         */\n        Solver.prototype.loss = function (filters) {\n            // Argument as an Array of percentages.\n            var color = this.reusedColor;\n            // Resetting the color to black in case\n            // it was called more than once\n            color.set(0, 0, 0);\n            color.invert(filters[0] / 100);\n            color.sepia(filters[1] / 100);\n            color.saturate(filters[2] / 100);\n            color.hueRotate(filters[3] * 3.6);\n            color.brightness(filters[4] / 100);\n            color.contrast(filters[5] / 100);\n            var colorHSL = color.hsl();\n            return (Math.abs(color.r - this.target.r) +\n                Math.abs(color.g - this.target.g) +\n                Math.abs(color.b - this.target.b) +\n                Math.abs(colorHSL.h - this.targetHSL.h) +\n                Math.abs(colorHSL.s - this.targetHSL.s) +\n                Math.abs(colorHSL.l - this.targetHSL.l));\n        };\n        /**\n         * Returns the CSS filter list for the received HEX color\n         *\n         * @private\n         * @param {number[]} filters\n         * @returns {string}\n         * @memberof Solver\n         */\n        Solver.prototype.css = function (filters) {\n            var formatCssFilterValueByMultiplier = function (idx, multiplier) {\n                if (multiplier === void 0) { multiplier = 1; }\n                return Math.round(filters[idx] * multiplier);\n            };\n            return [\n                \"invert(\".concat(formatCssFilterValueByMultiplier(0), \"%)\"),\n                \"sepia(\".concat(formatCssFilterValueByMultiplier(1), \"%)\"),\n                \"saturate(\".concat(formatCssFilterValueByMultiplier(2), \"%)\"),\n                \"hue-rotate(\".concat(formatCssFilterValueByMultiplier(3, 3.6), \"deg)\"),\n                \"brightness(\".concat(formatCssFilterValueByMultiplier(4), \"%)\"),\n                \"contrast(\".concat(formatCssFilterValueByMultiplier(5), \"%)\"),\n            ].join(' ');\n        };\n        return Solver;\n    }());\n\n    /**\n     * Transform a CSS Color from Hexadecimal to RGB color\n     *\n     * @param {string} hex hexadecimal color\n     * @returns {([number, number, number] | [])} array with the RGB colors or empty array\n     */\n    var hexToRgb = function (hex) {\n        if (hex.length === 4) {\n            return [parseInt(\"0x\".concat(hex[1]).concat(hex[1])), parseInt(\"0x\".concat(hex[2]).concat(hex[2])), parseInt(\"0x\".concat(hex[3]).concat(hex[3]))];\n        }\n        if (hex.length === 7) {\n            return [parseInt(\"0x\".concat(hex[1]).concat(hex[2])), parseInt(\"0x\".concat(hex[3]).concat(hex[4])), parseInt(\"0x\".concat(hex[5]).concat(hex[6]))];\n        }\n        return [];\n    };\n    var isNumeric = function (n) { return !isNaN(parseFloat(n)) && isFinite(n); };\n    // Memory cache for the computed results to avoid multiple\n    // calculations for the same color\n    var results = {};\n    /**\n     * A function that transforms a HEX color into CSS filters\n     *\n     * @param colorValue string hexadecimal color\n     * @param opts HexToCssConfiguration function configuration\n     *\n     */\n    var hexToCSSFilter = function (colorValue, opts) {\n        var _a;\n        if (opts === void 0) { opts = {}; }\n        var red;\n        var green;\n        var blue;\n        if (results[colorValue] && !opts.forceFilterRecalculation) {\n            return Object.assign({}, results[colorValue], { cache: true });\n        }\n        var color;\n        try {\n            _a = __read(hexToRgb(colorValue), 3), red = _a[0], green = _a[1], blue = _a[2];\n            if (!isNumeric(red) || !isNumeric(green) || !isNumeric(blue)) {\n                throw new Error(\"hextToRgb returned an invalid value for '\".concat(colorValue, \"'\"));\n            }\n            color = new Color(Number(red), Number(green), Number(blue));\n        }\n        catch (error) {\n            throw new Error(\"Color value should be in HEX format. \".concat(error));\n        }\n        var solver = new Solver(color, Object.assign({}, \n        // `HexToCssConfiguration` Defaults\n        {\n            acceptanceLossPercentage: 5,\n            maxChecks: 30,\n            forceFilterRecalculation: false,\n        }, opts));\n        return (results[colorValue] = Object.assign({}, solver.solve(), {\n            hex: colorValue,\n            rgb: [red, green, blue],\n            cache: false,\n        }));\n    };\n    /**\n     * A function that clears cached results\n     *\n     * @param  {string} key? HEX string value passed previously `#24639C`. If not passed, it clears all cached results\n     * @returns void\n     */\n    var clearCache = function (key) {\n        if (!key) {\n            results = {};\n        }\n        else if (results[key]) {\n            delete results[key];\n        }\n    };\n\n    exports.clearCache = clearCache;\n    exports.hexToCSSFilter = hexToCSSFilter;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/hex-to-css-filter/dist/umd/hex-to-css-filter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/ui/MapNode.tsx":
/*!***********************************!*\
  !*** ./components/ui/MapNode.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapNode: function() { return /* binding */ MapNode; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"(app-pages-browser)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var _public_BUBBLY_USER_svg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../public/BUBBLY_USER.svg */ \"(app-pages-browser)/./public/BUBBLY_USER.svg\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var hex_to_css_filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! hex-to-css-filter */ \"(app-pages-browser)/./node_modules/hex-to-css-filter/dist/umd/hex-to-css-filter.js\");\n/* harmony import */ var hex_to_css_filter__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(hex_to_css_filter__WEBPACK_IMPORTED_MODULE_4__);\n\nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction MapNode(NodeProperties) {\n    _s();\n    var [showTrans, showOnClick] = react__WEBPACK_IMPORTED_MODULE_3___default().useState(false);\n    const XOFFSET = 256;\n    const YOFFSET = 256;\n    const scaleV = NodeProperties.scale ? NodeProperties.scale : 1;\n    'return `<div id=\"point-${id}\" style=\"background-color: ${fform_colors.get(id)};position: absolute;border-radius: 100px; border: 3px black solid;width: 25px;height: 25px;left: ${XOFFSET+x}px;top: ${YOFFSET-y}px;text-align: center;transform: rotate(${theta}deg);\"><div id=\"arr\" style=\"background-color: blue;width: 9px;height: 6px;left: 8px;position: relative;\"></div>${id}</div>`';\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: \"\".concat(XOFFSET + NodeProperties.x * scaleV, \"px\"),\n            top: \"\".concat(YOFFSET - NodeProperties.y * scaleV, \"px\"),\n            rotate: \"\".concat(NodeProperties.heading ? NodeProperties.heading - 90 : -90, \"deg\")\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                id: \"identifier\",\n                children: \"3\"\n            }, void 0, false, {\n                fileName: \"/Users/ktzhang/convo-sepper/components/ui/MapNode.tsx\",\n                lineNumber: 33,\n                columnNumber: 209\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_image__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                style: {\n                    filter: (0,hex_to_css_filter__WEBPACK_IMPORTED_MODULE_4__.hexToCSSFilter)(NodeProperties.colour).filter\n                },\n                src: _public_BUBBLY_USER_svg__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n                alt: \"bubbly\"\n            }, void 0, false, {\n                fileName: \"/Users/ktzhang/convo-sepper/components/ui/MapNode.tsx\",\n                lineNumber: 33,\n                columnNumber: 237\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ktzhang/convo-sepper/components/ui/MapNode.tsx\",\n        lineNumber: 33,\n        columnNumber: 7\n    }, this);\n}\n_s(MapNode, \"kJDyEmayh0Gzh7NljP+kZtKdOZE=\");\n_c = MapNode;\nvar _c;\n$RefreshReg$(_c, \"MapNode\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvdWkvTWFwTm9kZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQW9CTUE7QUFuQndCO0FBRW9CO0FBR3hCO0FBQ3lCO0FBZTVDLFNBQVNLLFFBQVFDLGNBQXlCOztJQUMvQyxJQUFJLENBQUNDLFdBQVdDLFlBQVksR0FBR0wscURBQWMsQ0FBQztJQUVoRCxNQUFNTyxVQUFVO0lBQ2hCLE1BQU1DLFVBQVU7SUFFaEIsTUFBTUMsU0FBU04sZUFBZU8sS0FBSyxHQUFHUCxlQUFlTyxLQUFLLEdBQUc7SUFFM0Q7SUFDQSxxQkFDSSw4REFBQ0M7UUFBSUMsT0FBTztZQUFDQyxVQUFTO1lBQVlDLE1BQU0sR0FBbUMsT0FBaENQLFVBQVFKLGVBQWVZLENBQUMsR0FBQ04sUUFBTztZQUFLTyxLQUFLLEdBQW1DLE9BQWhDUixVQUFRTCxlQUFlYyxDQUFDLEdBQUNSLFFBQU87WUFBS1MsUUFBUSxHQUE4RCxPQUEzRGYsZUFBZWdCLE9BQU8sR0FBR2hCLGVBQWVnQixPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUc7UUFBSTs7MEJBQUcsOERBQUNSO2dCQUFJUyxJQUFHOzBCQUFhOzs7Ozs7MEJBQU8sOERBQUN0QixrREFBS0E7Z0JBQUNjLE9BQU87b0JBQUNTLFFBQVFwQixpRUFBY0EsQ0FBQ0UsZUFBZW1CLE1BQU0sRUFBRUQsTUFBTTtnQkFBQTtnQkFBR0UsS0FBS3hCLCtEQUFNQTtnQkFBRXlCLEtBQUs7Ozs7Ozs7Ozs7OztBQUVwVTtHQVpnQnRCO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbXBvbmVudHMvdWkvTWFwTm9kZS50c3g/MjM5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XG5pbXBvcnQgSW1hZ2UgZnJvbSBcIm5leHQvaW1hZ2VcIlxuaW1wb3J0IHsgU3RhdGljSW1wb3J0IH0gZnJvbSBcIm5leHQvZGlzdC9zaGFyZWQvbGliL2dldC1pbWctcHJvcHNcIjtcbmltcG9ydCBCVUJCTFkgZnJvbSBcIi4uLy4uL3B1YmxpYy9CVUJCTFlfVVNFUi5zdmdcIjtcbmltcG9ydCB7IENTU1Byb3BlcnRpZXMgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEludGVyIH0gZnJvbSBcIm5leHQvZm9udC9nb29nbGVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGhleFRvQ1NTRmlsdGVyIH0gZnJvbSBcImhleC10by1jc3MtZmlsdGVyXCI7XG5cbmludGVyZmFjZSBOb2RlUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHBhdXNlZD86IGJvb2xlYW5cbiAgeDogbnVtYmVyLFxuICB5OiBudW1iZXIsXG4gIGhlYWRpbmc6IG51bWJlcixcbiAgTm9kZUlkOiBudW1iZXIsXG4gIGNvbG91cjogc3RyaW5nLFxuICBzY2FsZT86IG51bWJlclxufVxuXG5jb25zdCBpbnRlckYgPSBJbnRlcih7c3Vic2V0czpbJ2xhdGluJ119KVxuXG5leHBvcnQgZnVuY3Rpb24gTWFwTm9kZShOb2RlUHJvcGVydGllczogTm9kZVByb3BzKSB7XG4gIHZhciBbc2hvd1RyYW5zLCBzaG93T25DbGlja10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbmNvbnN0IFhPRkZTRVQgPSAyNTY7XG5jb25zdCBZT0ZGU0VUID0gMjU2O1xuXG5jb25zdCBzY2FsZVYgPSBOb2RlUHJvcGVydGllcy5zY2FsZSA/IE5vZGVQcm9wZXJ0aWVzLnNjYWxlIDogMVxuXG4gICdyZXR1cm4gYDxkaXYgaWQ9XCJwb2ludC0ke2lkfVwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogJHtmZm9ybV9jb2xvcnMuZ2V0KGlkKX07cG9zaXRpb246IGFic29sdXRlO2JvcmRlci1yYWRpdXM6IDEwMHB4OyBib3JkZXI6IDNweCBibGFjayBzb2xpZDt3aWR0aDogMjVweDtoZWlnaHQ6IDI1cHg7bGVmdDogJHtYT0ZGU0VUK3h9cHg7dG9wOiAke1lPRkZTRVQteX1weDt0ZXh0LWFsaWduOiBjZW50ZXI7dHJhbnNmb3JtOiByb3RhdGUoJHt0aGV0YX1kZWcpO1wiPjxkaXYgaWQ9XCJhcnJcIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IGJsdWU7d2lkdGg6IDlweDtoZWlnaHQ6IDZweDtsZWZ0OiA4cHg7cG9zaXRpb246IHJlbGF0aXZlO1wiPjwvZGl2PiR7aWR9PC9kaXY+YCdcbiAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGU9e3twb3NpdGlvbjpcImFic29sdXRlXCIsIGxlZnQ6IGAke1hPRkZTRVQrTm9kZVByb3BlcnRpZXMueCpzY2FsZVZ9cHhgLCB0b3A6IGAke1lPRkZTRVQtTm9kZVByb3BlcnRpZXMueSpzY2FsZVZ9cHhgLCByb3RhdGU6IGAke05vZGVQcm9wZXJ0aWVzLmhlYWRpbmcgPyBOb2RlUHJvcGVydGllcy5oZWFkaW5nIC0gOTAgOiAtOTB9ZGVnYH19PjxkaXYgaWQ9XCJpZGVudGlmaWVyXCI+MzwvZGl2PjxJbWFnZSBzdHlsZT17e2ZpbHRlcjogaGV4VG9DU1NGaWx0ZXIoTm9kZVByb3BlcnRpZXMuY29sb3VyKS5maWx0ZXJ9fSBzcmM9e0JVQkJMWX0gYWx0PXtcImJ1YmJseVwifT48L0ltYWdlPjwvZGl2PlxuICApO1xufSAiXSwibmFtZXMiOlsiaW50ZXJGIiwiSW1hZ2UiLCJCVUJCTFkiLCJSZWFjdCIsImhleFRvQ1NTRmlsdGVyIiwiTWFwTm9kZSIsIk5vZGVQcm9wZXJ0aWVzIiwic2hvd1RyYW5zIiwic2hvd09uQ2xpY2siLCJ1c2VTdGF0ZSIsIlhPRkZTRVQiLCJZT0ZGU0VUIiwic2NhbGVWIiwic2NhbGUiLCJkaXYiLCJzdHlsZSIsInBvc2l0aW9uIiwibGVmdCIsIngiLCJ0b3AiLCJ5Iiwicm90YXRlIiwiaGVhZGluZyIsImlkIiwiZmlsdGVyIiwiY29sb3VyIiwic3JjIiwiYWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/ui/MapNode.tsx\n"));

/***/ })

});